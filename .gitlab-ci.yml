stages:
- build
- test
- deploy

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: debian:stable

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

default:
  before_script:
    - apt update -y
    - apt dist-upgrade -y
    - apt install -y python3-pip git

    - pip3 install --user -U virtualenv pip
    - export PATH=~/.local/bin:$PATH
    
    - virtualenv ~/venv
    - source ~/venv/bin/activate

    - pip install -U pip

    - mkdir -p ~/.pip
    - |
      cat > ~/.pip/pip.conf <<EOF
      [global]
      extra-index-url = https://rfstools-worker:${CI_RFSTOOLS_WORKER_TOKEN}>@git.profinit.eu/api/v4/projects/551/packages/pypi/simple 
        https://rfstools-worker:${CI_RFSTOOLS_WORKER_TOKEN}@git.profinit.eu/api/v4/projects/552/packages/pypi/simple

      EOF

# test:
#  script:
#    - python setup.py test
#    - pip install tox flake8  # you can also use tox
#    - tox -e py36,flake8

build:
  stage: build
  script:
    - python setup.py sdist bdist_wheel
    # an alternative approach is to install and run:
    - pip install dist/*.tar.gz
    # run the command here
  artifacts:
    paths:
      - dist/*.whl
      - dist/*.tar.gz

deploy:
  stage: deploy
  environment: deploy
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - pip install twine
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url https://git.profinit.eu/api/v4/projects/${CI_PROJECT_ID}/packages/pypi dist/*

deploy-doc:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_DOCS_ACCESS_TOKEN
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - |
      apt install -y texlive-latex-recommended latexmk

      export doc_repo=/tmp/rfstools-docs

      pushd /tmp
      git clone https://oauth2:${CI_DOCS_ACCESS_TOKEN}@git.profinit.eu/rfs/rfstools-docs/
      popd

      pushd $doc_repo
      rm -fr ./commands ./rfstools-dev-doc.pdf 2>/dev/null || :
      popd

      ./docs/generate-docs.sh
      cp -r docs/_build/commands $doc_repo
      cp docs/_build/latex/rfstools.pdf $doc_repo/rfstools-dev-doc.pdf
      cp docs/_build/README.md $doc_repo

      cd $doc_repo
      
      git config --global user.email "$GITLAB_USER_EMAIL"
      git config --global user.name "$GITLAB_USER_NAME"

      git add -A
      git commit -m "$CI_COMMIT_MESSAGE" || :

      [ -n "$CI_COMMIT_TAG" ] && git tag "$CI_COMMIT_TAG"

      git push
      git push --tags

  artifacts:
    paths:
      - /builds/rfs/rfstools/doc
      

# pages:
 # stage: build
 # script:
 #   - pip install sphinx sphinx-rtd-theme
 #   - cd doc ; make html
 #   - mv build/html/ ../public/
 # artifacts:
 #   paths:
 #     - public
 # rules:
 #   - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

