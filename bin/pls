#!/usr/bin/env python3
from _rfstools import arg_parser, arg_processor
import logging

import os.path


def get_instance():
  p = arg_parser.oneplus_arg_parser(description='This command list a given remote folder, or returns a file name, if it is not a folder.')

  p.add('-p', '--prepend-dirname', action='store_true', help='Enables prepending dirnames (+ r:) to the output.')
  p.add('-d', '--directory', action='store_true', help='List directories themself, not their content.')
  p.add('-l', '--long-format', action='store_true', help='Use long listing format. Not implemented yet.')

  p.add('--sort', help="Sort by time/size. eg. --sort=time. Not implemented yet.")
  p.add('-r', '--reverse', help="Reverse order while sorting. Not implemented yet.")
  p.add('--time-style', help="Eather standard, fulliso or timestamp. Not implemented yet.")

  return arg_processor.init(p, "pls", ["prepend_dirname", "directory", "long_format", "sort", "reverse", "time_style"])

printed = []

def v_print(text):
  printed.append(text)
  print(text)

def finalize_printing():
  logging.info('pls output:\n' + "\n".join(printed))

def ls(path):
  logging.debug("Printing list output of remote file r:{}".format(path))

  if ic.prepend_dirname:
    if ic.directory:
      output_list = ['r:' + path]

    else:
      output_list = ["r:{}".format(s) for s in ic.connection.xls(path)]

  else:
    if ic.directory:
      dirname, basename = os.path.split(path)
      output_list = [basename]

    else:
      output_list = ic.connection.ls(path)

  for s in output_list:
    v_print(s)
    
     
try:
  with get_instance() as ic:

    for f in ic.files:
      if f.remote == False:
        raise ValueError("A given file must be remote.")

    if len(ic.files) == 1 or ic.directory:
      for f in ic.files:
        ls(f.path)
    
    else:
      nondirs = []
      dirs = []

      for f in ic.files:
        if ic.connection.isdir(f.path):
          dirs.append(f.path)

        else:   
          nondirs.append(f.path)

      for nondir in nondirs:
        ls(nondir)

      for d in dirs:
        if ic.prepend_dirname:
          v_print('r:' + d + ':')
          ls(d)

        else:
          dirname, basename = os.path.split(d)
          v_print(basename + ':')
          ls(d)


except Exception: 
  finalize_printing()
  logging.exception("Fatal error. (returning 1)")
  exit(1)
 
finalize_printing()
logging.info("Finished succesfully. (returning 0)")
exit(0)
